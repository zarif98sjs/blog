<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Number Theory on Convoluted Mess</title>
    <link>https://zarif98sjs.github.io/blog/tags/number-theory/</link>
    <description>Recent content in Number Theory on Convoluted Mess</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zarif98sjs.github.io/blog/tags/number-theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LightOj 1054 (Efficient Pseudo Code)</title>
      <link>https://zarif98sjs.github.io/blog/blog/lightoj1054/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zarif98sjs.github.io/blog/blog/lightoj1054/</guid>
      <description>Idea  Prime Factorization | Geometric Progression
  Sum of Divisors of n can be calculated using Prime Factorization .
If $$ n = {p_{0}}^{q_{0}} * {p_{1}}^{q_{1}} * &amp;hellip; * {p_{n}}^{q_{n}} $$ Then , $$ Sum of Divisor = ({p_{0}}^{0} + {p_{0}}^{1} + &amp;hellip; + {p_{0}}^{q_{0}}) * &amp;hellip; * ({p_{n}}^{0} + {p_{n}}^{1} + &amp;hellip; + {p_{n}}^{q_{n}}) $$
  For a geometric progression , if first term is a and ration is r ,</description>
    </item>
    
    <item>
      <title>LightOj 1096 (nth Term)</title>
      <link>https://zarif98sjs.github.io/blog/blog/lightoj1096/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zarif98sjs.github.io/blog/blog/lightoj1096/</guid>
      <description>Idea  Matrix Exponential
 Matrix Expo Resource One thing to notice is that here the power will be n-2  /* Which of the favors of your Lord will you deny? */ #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; #define MAX 100050  #define LL long long #define PII pair&amp;lt;int,int&amp;gt; #define MP make_pair #define F first #define S second  #define N 4  int base[4][4] = {{-1,0,-1,1},{1,0,0,0},{0,1,0,0},{0,0,0,1}}, unit[4][4]; int mod=10007; void multiply(int a[N][N], int b[N][N]) { int mul[N][N]; for (int i = 0; i &amp;lt; N; i++) { for (int j = 0; j &amp;lt; N; j++) { mul[i][j] = 0; for (int k = 0; k &amp;lt; N; k++) mul[i][j] += (a[i][k]*b[k][j])%mod; } } // for (int i=0; i&amp;lt;N; i++)  // for (int j=0; j&amp;lt;N; j++)  // a[i][j] = mul[i][j];  memcpy(a,mul,sizeof mul); } void fast_mat_expo(int r[N][N],int n) { int b[4][4]; memcpy(r, unit, sizeof unit); memcpy(b, base, sizeof base); while(n&amp;gt;0) { if(n&amp;amp;1)//odd  multiply(r,b); n&amp;gt;&amp;gt;=1; multiply(b,b); } } int powa(int x,int y) { if(y==0) return 1; int temp = powa(x,y/2); if((y&amp;amp;1)==0) // (y%2==0) // LL korle 1LL  return temp*temp; else return x*temp*temp; } int main() { //freopen(&amp;#34;LightOj1093.</description>
    </item>
    
  </channel>
</rss>
